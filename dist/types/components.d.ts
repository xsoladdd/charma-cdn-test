/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { TGetProductResponse } from "./types/products.types";
import { DropdownOption } from "./components/ui/charma-dropdown/charma-dropdown";
import { ButtonSizes, ButtonTypes } from "./components/charma-gifting-button/charma-gifting-button";
import { TRadioOptions } from "./components/ui/charma-radio-group/type";
import { ButtonSizes as ButtonSizes1 } from "./components/charma-gifting-button/charma-gifting-button";
export { TGetProductResponse } from "./types/products.types";
export { DropdownOption } from "./components/ui/charma-dropdown/charma-dropdown";
export { ButtonSizes, ButtonTypes } from "./components/charma-gifting-button/charma-gifting-button";
export { TRadioOptions } from "./components/ui/charma-radio-group/type";
export { ButtonSizes as ButtonSizes1 } from "./components/charma-gifting-button/charma-gifting-button";
export namespace Components {
    interface CharmaCard {
        "isDisplayOnly": boolean;
        "product": Partial<TGetProductResponse>;
        "selected": boolean;
    }
    interface CharmaConfirmation {
        "language": string;
        "navigateTab": (index: number) => void;
    }
    interface CharmaDelivery {
        "language": string;
    }
    interface CharmaDropdown {
        "defaultValue": DropdownOption;
        "error": boolean;
        "label": string;
        "name": string;
        "options": DropdownOption[];
        "required": boolean;
    }
    interface CharmaGiftingButton {
        "disabled": boolean;
        "loading": boolean;
        "size": ButtonSizes;
        "type": ButtonTypes;
    }
    interface CharmaInput {
        "error": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface CharmaOrderPlaced {
        "handleClose": () => void;
        "language": string;
    }
    interface CharmaPayment {
        "language": string;
    }
    interface CharmaProducts {
    }
    interface CharmaRadioGroup {
        "error": boolean;
        "label": string;
        "name": string;
        "options": TRadioOptions;
        "orientation": 'vertical' | 'horizontal';
        "required": boolean;
        "selected": string;
    }
    interface CharmaTextarea {
        "error": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface CharmaWidget {
        "buttonSize": ButtonSizes1;
        "language": 'en' | 'sv';
        "productId": string;
    }
}
export interface CharmaDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCharmaDropdownElement;
}
export interface CharmaInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCharmaInputElement;
}
export interface CharmaProductsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCharmaProductsElement;
}
export interface CharmaRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCharmaRadioGroupElement;
}
export interface CharmaTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCharmaTextareaElement;
}
declare global {
    interface HTMLCharmaCardElement extends Components.CharmaCard, HTMLStencilElement {
    }
    var HTMLCharmaCardElement: {
        prototype: HTMLCharmaCardElement;
        new (): HTMLCharmaCardElement;
    };
    interface HTMLCharmaConfirmationElement extends Components.CharmaConfirmation, HTMLStencilElement {
    }
    var HTMLCharmaConfirmationElement: {
        prototype: HTMLCharmaConfirmationElement;
        new (): HTMLCharmaConfirmationElement;
    };
    interface HTMLCharmaDeliveryElement extends Components.CharmaDelivery, HTMLStencilElement {
    }
    var HTMLCharmaDeliveryElement: {
        prototype: HTMLCharmaDeliveryElement;
        new (): HTMLCharmaDeliveryElement;
    };
    interface HTMLCharmaDropdownElementEventMap {
        "valueChange": string;
    }
    interface HTMLCharmaDropdownElement extends Components.CharmaDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCharmaDropdownElementEventMap>(type: K, listener: (this: HTMLCharmaDropdownElement, ev: CharmaDropdownCustomEvent<HTMLCharmaDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCharmaDropdownElementEventMap>(type: K, listener: (this: HTMLCharmaDropdownElement, ev: CharmaDropdownCustomEvent<HTMLCharmaDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCharmaDropdownElement: {
        prototype: HTMLCharmaDropdownElement;
        new (): HTMLCharmaDropdownElement;
    };
    interface HTMLCharmaGiftingButtonElement extends Components.CharmaGiftingButton, HTMLStencilElement {
    }
    var HTMLCharmaGiftingButtonElement: {
        prototype: HTMLCharmaGiftingButtonElement;
        new (): HTMLCharmaGiftingButtonElement;
    };
    interface HTMLCharmaInputElementEventMap {
        "valueChange": string;
    }
    interface HTMLCharmaInputElement extends Components.CharmaInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCharmaInputElementEventMap>(type: K, listener: (this: HTMLCharmaInputElement, ev: CharmaInputCustomEvent<HTMLCharmaInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCharmaInputElementEventMap>(type: K, listener: (this: HTMLCharmaInputElement, ev: CharmaInputCustomEvent<HTMLCharmaInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCharmaInputElement: {
        prototype: HTMLCharmaInputElement;
        new (): HTMLCharmaInputElement;
    };
    interface HTMLCharmaOrderPlacedElement extends Components.CharmaOrderPlaced, HTMLStencilElement {
    }
    var HTMLCharmaOrderPlacedElement: {
        prototype: HTMLCharmaOrderPlacedElement;
        new (): HTMLCharmaOrderPlacedElement;
    };
    interface HTMLCharmaPaymentElement extends Components.CharmaPayment, HTMLStencilElement {
    }
    var HTMLCharmaPaymentElement: {
        prototype: HTMLCharmaPaymentElement;
        new (): HTMLCharmaPaymentElement;
    };
    interface HTMLCharmaProductsElementEventMap {
        "productSelect": string;
    }
    interface HTMLCharmaProductsElement extends Components.CharmaProducts, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCharmaProductsElementEventMap>(type: K, listener: (this: HTMLCharmaProductsElement, ev: CharmaProductsCustomEvent<HTMLCharmaProductsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCharmaProductsElementEventMap>(type: K, listener: (this: HTMLCharmaProductsElement, ev: CharmaProductsCustomEvent<HTMLCharmaProductsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCharmaProductsElement: {
        prototype: HTMLCharmaProductsElement;
        new (): HTMLCharmaProductsElement;
    };
    interface HTMLCharmaRadioGroupElementEventMap {
        "valueChange": string;
    }
    interface HTMLCharmaRadioGroupElement extends Components.CharmaRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCharmaRadioGroupElementEventMap>(type: K, listener: (this: HTMLCharmaRadioGroupElement, ev: CharmaRadioGroupCustomEvent<HTMLCharmaRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCharmaRadioGroupElementEventMap>(type: K, listener: (this: HTMLCharmaRadioGroupElement, ev: CharmaRadioGroupCustomEvent<HTMLCharmaRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCharmaRadioGroupElement: {
        prototype: HTMLCharmaRadioGroupElement;
        new (): HTMLCharmaRadioGroupElement;
    };
    interface HTMLCharmaTextareaElementEventMap {
        "valueChange": string;
    }
    interface HTMLCharmaTextareaElement extends Components.CharmaTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCharmaTextareaElementEventMap>(type: K, listener: (this: HTMLCharmaTextareaElement, ev: CharmaTextareaCustomEvent<HTMLCharmaTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCharmaTextareaElementEventMap>(type: K, listener: (this: HTMLCharmaTextareaElement, ev: CharmaTextareaCustomEvent<HTMLCharmaTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCharmaTextareaElement: {
        prototype: HTMLCharmaTextareaElement;
        new (): HTMLCharmaTextareaElement;
    };
    interface HTMLCharmaWidgetElement extends Components.CharmaWidget, HTMLStencilElement {
    }
    var HTMLCharmaWidgetElement: {
        prototype: HTMLCharmaWidgetElement;
        new (): HTMLCharmaWidgetElement;
    };
    interface HTMLElementTagNameMap {
        "charma-card": HTMLCharmaCardElement;
        "charma-confirmation": HTMLCharmaConfirmationElement;
        "charma-delivery": HTMLCharmaDeliveryElement;
        "charma-dropdown": HTMLCharmaDropdownElement;
        "charma-gifting-button": HTMLCharmaGiftingButtonElement;
        "charma-input": HTMLCharmaInputElement;
        "charma-order-placed": HTMLCharmaOrderPlacedElement;
        "charma-payment": HTMLCharmaPaymentElement;
        "charma-products": HTMLCharmaProductsElement;
        "charma-radio-group": HTMLCharmaRadioGroupElement;
        "charma-textarea": HTMLCharmaTextareaElement;
        "charma-widget": HTMLCharmaWidgetElement;
    }
}
declare namespace LocalJSX {
    interface CharmaCard {
        "isDisplayOnly"?: boolean;
        "product"?: Partial<TGetProductResponse>;
        "selected"?: boolean;
    }
    interface CharmaConfirmation {
        "language"?: string;
        "navigateTab"?: (index: number) => void;
    }
    interface CharmaDelivery {
        "language"?: string;
    }
    interface CharmaDropdown {
        "defaultValue"?: DropdownOption;
        "error"?: boolean;
        "label"?: string;
        "name"?: string;
        "onValueChange"?: (event: CharmaDropdownCustomEvent<string>) => void;
        "options"?: DropdownOption[];
        "required"?: boolean;
    }
    interface CharmaGiftingButton {
        "disabled"?: boolean;
        "loading"?: boolean;
        "size"?: ButtonSizes;
        "type"?: ButtonTypes;
    }
    interface CharmaInput {
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChange"?: (event: CharmaInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface CharmaOrderPlaced {
        "handleClose"?: () => void;
        "language"?: string;
    }
    interface CharmaPayment {
        "language"?: string;
    }
    interface CharmaProducts {
        "onProductSelect"?: (event: CharmaProductsCustomEvent<string>) => void;
    }
    interface CharmaRadioGroup {
        "error"?: boolean;
        "label"?: string;
        "name"?: string;
        "onValueChange"?: (event: CharmaRadioGroupCustomEvent<string>) => void;
        "options"?: TRadioOptions;
        "orientation"?: 'vertical' | 'horizontal';
        "required"?: boolean;
        "selected"?: string;
    }
    interface CharmaTextarea {
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onValueChange"?: (event: CharmaTextareaCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface CharmaWidget {
        "buttonSize"?: ButtonSizes1;
        "language"?: 'en' | 'sv';
        "productId"?: string;
    }
    interface IntrinsicElements {
        "charma-card": CharmaCard;
        "charma-confirmation": CharmaConfirmation;
        "charma-delivery": CharmaDelivery;
        "charma-dropdown": CharmaDropdown;
        "charma-gifting-button": CharmaGiftingButton;
        "charma-input": CharmaInput;
        "charma-order-placed": CharmaOrderPlaced;
        "charma-payment": CharmaPayment;
        "charma-products": CharmaProducts;
        "charma-radio-group": CharmaRadioGroup;
        "charma-textarea": CharmaTextarea;
        "charma-widget": CharmaWidget;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "charma-card": LocalJSX.CharmaCard & JSXBase.HTMLAttributes<HTMLCharmaCardElement>;
            "charma-confirmation": LocalJSX.CharmaConfirmation & JSXBase.HTMLAttributes<HTMLCharmaConfirmationElement>;
            "charma-delivery": LocalJSX.CharmaDelivery & JSXBase.HTMLAttributes<HTMLCharmaDeliveryElement>;
            "charma-dropdown": LocalJSX.CharmaDropdown & JSXBase.HTMLAttributes<HTMLCharmaDropdownElement>;
            "charma-gifting-button": LocalJSX.CharmaGiftingButton & JSXBase.HTMLAttributes<HTMLCharmaGiftingButtonElement>;
            "charma-input": LocalJSX.CharmaInput & JSXBase.HTMLAttributes<HTMLCharmaInputElement>;
            "charma-order-placed": LocalJSX.CharmaOrderPlaced & JSXBase.HTMLAttributes<HTMLCharmaOrderPlacedElement>;
            "charma-payment": LocalJSX.CharmaPayment & JSXBase.HTMLAttributes<HTMLCharmaPaymentElement>;
            "charma-products": LocalJSX.CharmaProducts & JSXBase.HTMLAttributes<HTMLCharmaProductsElement>;
            "charma-radio-group": LocalJSX.CharmaRadioGroup & JSXBase.HTMLAttributes<HTMLCharmaRadioGroupElement>;
            "charma-textarea": LocalJSX.CharmaTextarea & JSXBase.HTMLAttributes<HTMLCharmaTextareaElement>;
            "charma-widget": LocalJSX.CharmaWidget & JSXBase.HTMLAttributes<HTMLCharmaWidgetElement>;
        }
    }
}
