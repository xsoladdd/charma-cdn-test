{"version":3,"file":"charma-textarea.js","sourceRoot":"","sources":["../../../../src/components/ui/charma-textarea/charma-textarea.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACrF,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAOrD,MAAM,OAAO,cAAc;;IAWzB,aAAQ,GAAG,GAAG,EAAE;MACd,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/B,CAAC,CAAC;IAEF,iBAAY,GAAG,CAAC,KAAY,EAAE,EAAE;MAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;IAClE,CAAC,CAAC;iBAhBc,EAAE;gBACH,cAAc;mBACV,KAAK;iBACS,EAAE;uBACb,EAAE;oBACL,KAAK;iBACR,EAAE;;EAYlB,MAAM;IACJ,MAAM,UAAU,GAAG,YAAM,KAAK,EAAC,sBAAsB,IAAE,IAAI,CAAC,KAAK,CAAQ,CAAC;IAC1E,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,oBAAoB;QAC7B,aACE,KAAK,EAAE,SAAS,CAAC,4FAA4F,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,EACnJ,OAAO,EAAE,IAAI,CAAC,IAAI;UAEjB,IAAI,CAAC,KAAK;;UAAG,IAAI,CAAC,QAAQ,IAAI,YAAM,KAAK,EAAC,cAAc,QAAS,CAC5D;QACR,WAAK,KAAK,EAAC,qBAAqB;UAC9B,gBACE,KAAK,EAAE,SAAS,CACd,8PAA8P,EAC9P,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CACnC,EACD,EAAE,EAAE,IAAI,CAAC,IAAI,EACb,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,GAC7B;UACD,IAAI,CAAC,KAAK,IAAI,UAAU,CACrB,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Host, Prop, State, h } from '@stencil/core';\nimport { joinClass } from '../../../utils/joinClass';\n\n@Component({\n  tag: 'charma-textarea',\n  shadow: true,\n  styleUrl: 'charma-textarea.scss',\n})\nexport class CharmaTextarea {\n  @Prop() label = '';\n  @Prop() name = 'charma-input';\n  @State() focused = false;\n  @Prop({ reflect: true }) value = '';\n  @Prop() placeholder = '';\n  @Prop() required = false;\n  @Prop() error = '';\n\n  @Event() valueChange: EventEmitter<string>;\n\n  setFocus = () => {\n    this.focused = !this.focused;\n  };\n\n  handleChange = (event: Event) => {\n    this.valueChange.emit((event.target as HTMLInputElement).value);\n  };\n\n  render() {\n    const errorBlock = <span class=\"text-xs text-red-500\">{this.error}</span>;\n    return (\n      <Host>\n        <div class=\"grid gap-2 font-ns\">\n          <label\n            class={joinClass('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', this.focused ? ' border-black' : '')}\n            htmlFor={this.name}\n          >\n            {this.label} {this.required && <span class=\"text-red-500\">*</span>}\n          </label>\n          <div class=\"flex flex-col gap-1\">\n            <textarea\n              class={joinClass(\n                'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n                this.error ? 'border-red-500' : '',\n              )}\n              id={this.name}\n              name={this.name}\n              placeholder={this.placeholder}\n            />\n            {this.error && errorBlock}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}