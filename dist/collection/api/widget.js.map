{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../src/api/widget.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEpC,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACtD,OAAO,EAAY,cAAc,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AAGvE,MAAM,OAAO,MAAM;EAGjB,KAAK,CAAC,IAAI,CAAC,GAAW;IACpB,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE;MACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;IACD,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACjC,CAAC;EAED,aAAa,CAAC,GAAW;IACvB,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;EAC5B,CAAC;EAED,eAAe,CAAC,YAAsB;IACpC,MAAM,QAAQ,GAAG,cAAc,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACxD,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;MACrB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;EAC9C,CAAC;EAED,IAAI,CAAC,IAAqB;IACxB,IAAI,SAAqC,CAAC;IAC1C,IAAI,IAAI,EAAE;MACR,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;MAChD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;OACvF;MAED,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;QACnC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;OACzB;MACD,IAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;QACxB,WAAW,CAAC,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;OACxD;KACF;IAED,MAAM,SAAS,GAAG,IAAI,WAAW,CAAC,oBAAoB,EAAE;MACtD,OAAO,EAAE,IAAI;MACb,MAAM,EAAE,SAAS;KAClB,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;EACzC,CAAC;EAED,KAAK;IACH,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,qBAAqB,EAAE;MACxD,OAAO,EAAE,IAAI;KACd,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;EAC1C,CAAC;CACF","sourcesContent":["import { API } from './api';\nimport { charmaAPI } from './index';\n\nimport { deliveryState, widgetState } from \"../store\";\nimport { Delivery, deliverySchema, openWidgetSchema } from './schemas';\nimport { OpenWidgetData } from './types';\n\nexport class Widget {\n  private charmaAPI: API;\n\n  async init(key: string) {\n    if (!key.trim().length) {\n      throw new Error('Widget key cannot be empty');\n    }\n\n    if (!this.charmaAPI) {\n      this.charmaAPI = charmaAPI;\n    }\n    await this.charmaAPI.init(key);\n  }\n\n  setAPIBaseUrl(url: string) {\n    charmaAPI.setBaseUrl(url);\n  }\n\n  setDeliveryData(deliveryData: Delivery) {\n    const delivery = deliverySchema.safeParse(deliveryData);\n    if (!delivery.success) {\n      throw new Error('Invalid delivery data');\n    }\n\n    Object.assign(deliveryState, delivery.data);\n  }\n\n  show(data?: OpenWidgetData) {\n    let eventData: OpenWidgetData | undefined;\n    if (data) {\n      const result = openWidgetSchema.safeParse(data);\n      if (!result.success) {\n        throw new Error('Invalid widget data! You must pass valid delivery or billing data.');\n      }\n\n      if (Object.keys(result.data).length) {\n        eventData = result.data;\n      }\n      if(result.data.productId) {\n        widgetState.preselectedProduct = result.data.productId;\n      }\n    }\n\n    const openEvent = new CustomEvent('charma-widget-open', {\n      bubbles: true,\n      detail: eventData,\n    });\n\n    document.body.dispatchEvent(openEvent);\n  }\n\n  close() {\n    const closeEvent = new CustomEvent('charma-widget-close', {\n      bubbles: true,\n    });\n\n    document.body.dispatchEvent(closeEvent);\n  }\n}\n"]}