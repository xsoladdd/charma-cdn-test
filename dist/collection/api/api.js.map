{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Env } from '@stencil/core';\nimport ky, { SearchParamsOption } from 'ky';\nimport type { KyInstance } from 'ky/distribution/types/ky';\nimport { ApiKeySchema, baseUrlSchema, querySchema } from './schemas';\nimport { BaseUrl, KeyData, OrderDto, QueryDto } from './types';\nimport { TGetBrandsResponse } from '../types/brands.types';\nimport { TGetAllCategoriesResponse } from '../types/categories.types';\nimport { TGetAllCountriesResponse } from '../types/countries.types';\nimport { TGetOrdersResponse, TGetOrderResponse, TCreateOrderResponse } from '../types/orders.types';\nimport { TGetProductsResponse, TGetProductResponse } from '../types/products.types';\n\nexport interface API {\n  api: KyInstance | null;\n  key: string;\n  init(key: string): Promise<void>;\n  getCategories(query?: QueryDto): Promise<any>;\n  getBrands(query?: QueryDto): Promise<any>;\n  getProducts(query?: QueryDto): Promise<any>;\n  getProduct(id: string): Promise<any>;\n  getOrder(orderNumber: string): Promise<any>;\n  getOrders(query?: QueryDto): Promise<any>;\n  createOrder(order: OrderDto): Promise<any>;\n  getKey(key: string): Promise<KeyData>;\n  setBaseUrl(url: string): void;\n}\n\nexport class CharmaAPI implements API {\n  api: KyInstance | null;\n  key: string;\n  keyMetadata: KeyData;\n  private baseUrl = `${Env.API_BASE_URL}`;\n\n  async init(key: string) {\n    const keyData = ApiKeySchema.safeParse(key);\n    if (!keyData.success) throw new Error('Key is invalid');\n\n    this.key = keyData.data;\n    this.api = ky.create({\n      prefixUrl: this.baseUrl,\n      headers: { Authorization: `Bearer ${this.key}` },\n      timeout: 6000,\n    });\n\n    const invalidKeyEvent = new CustomEvent('invalid-charma-key', {\n      bubbles: true,\n    });\n\n    return await this.getKey()\n      .then(res => {\n        if (!res.active) {\n          this.api = null;\n          document.body.dispatchEvent(invalidKeyEvent);\n          throw new Error('Charma API Key is invalid!');\n        }\n        return this.getCountries().then(data => {\n          this.keyMetadata = { ...res, countries: data };\n        });\n      })\n      .catch(_err => {\n        this.api = null;\n        document.body.dispatchEvent(invalidKeyEvent);\n        throw new Error('Charma API Key is invalid!');\n      });\n  }\n\n  setBaseUrl(baseUrl: BaseUrl) {\n    if (baseUrlSchema.safeParse(baseUrl).success) {\n      this.baseUrl = baseUrl;\n    } else {\n      throw new Error('baseUrl is not valid URL!');\n    }\n  }\n\n  async getCategories(query?: QueryDto): Promise<TGetAllCategoriesResponse> {\n    try {\n      const parsedQuery = querySchema.parse(query);\n      const res = await this.api.get('categories', {\n        searchParams: parsedQuery as SearchParamsOption,\n      });\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getCountries() {\n    try {\n      const res = await this.api.get('countries');\n      const resJson: TGetAllCountriesResponse = await res.json();\n      return resJson.countries;\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getBrands(query?: QueryDto): Promise<TGetBrandsResponse> {\n    try {\n      const parsedQuery = querySchema.parse(query);\n      const res = await this.api.get('brands', {\n        searchParams: parsedQuery as SearchParamsOption,\n      });\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getProducts(query?: QueryDto): Promise<TGetProductsResponse> {\n    try {\n      const parsedQuery = querySchema.parse(query);\n      const res = await this.api.get('products', {\n        searchParams: parsedQuery as SearchParamsOption,\n      });\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getProduct(id: string): Promise<TGetProductResponse> {\n    if (!id) throw new Error('Product ID is required');\n    try {\n      const res = await this.api.get(`products/${id}`);\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getOrder(orderNumber: string): Promise<TGetOrdersResponse> {\n    if (!orderNumber) throw new Error('Order Number is required');\n    try {\n      const res = this.api.get(`orders/${orderNumber}`);\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async getOrders(query?: QueryDto): Promise<TGetOrderResponse> {\n    try {\n      const parsedQuery = querySchema.parse(query);\n      const res = this.api.get(`orders`, {\n        searchParams: parsedQuery as SearchParamsOption,\n      });\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n\n  async createOrder(order: OrderDto): Promise<TCreateOrderResponse> {\n    try {\n      const res = await this.api.post(`order`, {\n        json: order,\n      });\n      if (!res.ok) {\n        throw new Error('Something went wrong');\n      }\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n      return await error;\n    }\n  }\n\n  async getKey(): Promise<KeyData> {\n    try {\n      const res = await this.api.get(`get-key/${this.key}`);\n      return await res.json();\n    } catch (error) {\n      if (error.name === 'HTTPError') {\n        return await error.response.json();\n      }\n    }\n  }\n}\n"]}