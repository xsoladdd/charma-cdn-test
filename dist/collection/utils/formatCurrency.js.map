{"version":3,"file":"formatCurrency.js","sourceRoot":"","sources":["../../src/utils/formatCurrency.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAa,EAAE,EAAE;EAC9C,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;EAChC,QAAQ,QAAQ,EAAE;IAChB,KAAK,IAAI;MACP,QAAQ,GAAG,OAAO,CAAC;MACnB,MAAM;IACR,KAAK,IAAI;MACP,QAAQ,GAAG,OAAO,CAAC;MACnB,MAAM;IACR;MACE,QAAQ,GAAG,OAAO,CAAC;GACtB;EACD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;IACjC,KAAK,EAAE,UAAU;IACjB,QAAQ,EAAE,KAAK;IACf,qBAAqB,EAAE,CAAC;IACxB,qBAAqB,EAAE,CAAC;GACzB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import i18next from 'i18next';\n\nexport const formatCurrency = (value: number) => {\n  let language = i18next.language;\n  switch (language) {\n    case 'en':\n      language = 'en-US';\n      break;\n    case 'sv':\n      language = 'sv-SE';\n      break;\n    default:\n      language = 'sv-SE';\n  }\n  return Intl.NumberFormat(language, {\n    style: 'currency',\n    currency: 'SEK',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(value);\n};\n"]}