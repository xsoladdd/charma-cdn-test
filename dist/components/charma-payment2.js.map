{"file":"charma-payment2.js","mappings":"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","names":["i18next"],"sources":["src/types/widget.ts","src/components/charma-payment/charma-payment.scss?tag=charma-payment&encapsulation=shadow","src/components/charma-payment/charma-payment.tsx"],"sourcesContent":["import { z } from 'zod';\n\nexport const languagesSchema = z.enum(['en', 'sv']);\nexport type Language = z.infer<typeof languagesSchema>;\n\nexport const deliveryOptionArray = ['personal', 'company'] as const;\nexport type TDeliveryOptionArray = (typeof deliveryOptionArray)[number];\n\nexport const invoiceOptionArray = ['electronic', 'postal', 'PDF'];\nexport type TInvoiceOptionArray = (typeof invoiceOptionArray)[number];\n",":host {\n  all: initial;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport i18next from 'i18next';\nimport { billingState, widgetState } from '../../store';\nimport { invoiceOptionArray } from '../../types/widget';\nimport { IWidgetState } from '../../store/types';\n\n@Component({\n  tag: 'charma-payment',\n  styleUrl: 'charma-payment.scss',\n  shadow: true,\n})\nexport class CharmaPayment {\n  // Passing this down so it will rerender once switched of language\n  @Prop() language: string;\n\n  handleBlur = (e: FocusEvent) => {\n    const key = e.target['id'];\n    if (widgetState.billingFormErrors?.[key]) {\n      widgetState.billingFormErrors[key] = undefined;\n      widgetState.error = undefined;\n    }\n  };\n\n  handleInputChange = (e: CustomEvent) => {\n    billingState[e.target['id']] = e.detail;\n  };\n\n  getError(id: keyof IWidgetState['billingFormErrors']): string {\n    return widgetState.billingFormErrors?.[id]?.length > 0 ? widgetState.billingFormErrors?.[id][0] : '';\n  }\n\n  render() {\n    return (\n      <Host>\n        <section>\n          <div class=\"rounded-md px-6 pb-6 pt-3 mb-4 bg-white flex flex-col gap-3\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 \">\n              <charma-input\n                required={true}\n                label={i18next.t('billingInformation.form.organization_number')}\n                name=\"organizationRegistrationId\"\n                onValueChange={this.handleInputChange}\n                value={billingState.organizationRegistrationId}\n                onBlur={this.handleBlur}\n                error={this.getError('organizationRegistrationId')}\n                id=\"organizationRegistrationId\"\n              ></charma-input>\n              <charma-input\n                required={true}\n                onValueChange={this.handleInputChange}\n                label={i18next.t('billingInformation.form.company_name')}\n                name=\"organizationName\"\n                value={billingState.organizationName}\n                error={this.getError('organizationName')}\n                onBlur={this.handleBlur}\n                id=\"organizationName\"\n              ></charma-input>\n            </div>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 \">\n              <charma-dropdown\n                options={invoiceOptionArray.map(opt => ({\n                  label: opt,\n                  value: opt,\n                }))}\n                required={true}\n                defaultValue={{\n                  value: billingState.invoiceType,\n                  label: billingState.invoiceType,\n                }}\n                onValueChange={this.handleInputChange}\n                label={i18next.t('billingInformation.form.invoice_delivery')}\n                name=\"invoiceType\"\n                id=\"invoiceType\"\n                // error={this.getError('')}\n              ></charma-dropdown>\n              <charma-input\n                value={billingState.email}\n                onValueChange={this.handleInputChange}\n                label={i18next.t('billingInformation.form.email')}\n                name=\"email\"\n                id=\"email\"\n                error={this.getError('email')}\n                onBlur={this.handleBlur}\n                required\n              ></charma-input>\n            </div>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 \">\n              <charma-input\n                required={true}\n                value={billingState.postalCode}\n                onValueChange={this.handleInputChange}\n                label={i18next.t('billingInformation.form.zip')}\n                name=\"postalCode\"\n                id=\"postalCode\"\n                error={this.getError('postalCode')}\n                onBlur={this.handleBlur}\n              ></charma-input>\n              <charma-input\n                required={true}\n                value={billingState.city}\n                onValueChange={this.handleInputChange}\n                label={i18next.t('billingInformation.form.city')}\n                name=\"city\"\n                id=\"city\"\n                error={this.getError('city')}\n                onBlur={this.handleBlur}\n              ></charma-input>\n            </div>\n            <div class=\"relative py-2 \">\n              <charma-textarea\n                value={billingState.message}\n                onChange={(e: Event) => {\n                  billingState.message = (e.target as HTMLTextAreaElement).value;\n                }}\n                label={i18next.t('billingInformation.form.message')}\n                id=\"message\"\n              />\n            </div>\n          </div>\n          {widgetState.hasError && <p class=\"text-red-400 text-sm font-body\">*{i18next.t('errors.formError')}</p>}\n        </section>\n      </Host>\n    );\n  }\n}\n"],"version":3}