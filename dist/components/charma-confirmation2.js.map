{"file":"charma-confirmation2.js","mappings":"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","names":["i18next"],"sources":["src/components/charma-confirmation/charma-confirmation.scss?tag=charma-confirmation&encapsulation=shadow","src/components/charma-confirmation/charma-confirmation.tsx"],"sourcesContent":[":host {\n  all: initial;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport { billingState, deliveryState, widgetState } from '../../store';\nimport i18next from 'i18next';\n\n@Component({\n  tag: 'charma-confirmation',\n  styleUrl: 'charma-confirmation.scss',\n  shadow: true,\n})\nexport class CharmaConfirmation {\n  // Passing this down so it will rerender once switched of language\n  @Prop() language: string;\n  @Prop() navigateTab: (index: number) => void;\n\n  render() {\n    type confirmationSectionParams = {\n      handleClick: (e: Event) => void;\n      title: string;\n      leftData: Array<{\n        label: string;\n        value: string;\n      }>;\n      rightData: Array<{\n        label: string;\n        value: string;\n      }>;\n    };\n    const confirmationSection = ({ title, leftData, rightData, handleClick }: confirmationSectionParams) => {\n      return (\n        <div class=\"\">\n          <div class=\"flex justify-between  place-items-end\">\n            <p>{title}</p>\n            <button\n              class=\"inline-flex items-center justify-center rounded-md  font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-white text-black shadow hover:bg-white/90 h-9 px-4 py-2 font-ns gap-2 border-gray-300 border-[1px]\"\n              onClick={handleClick}\n            >\n              <span>\n                <svg\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  stroke-width=\"1.5\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                  height=\"1em\"\n                  width=\"1em\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"h-5 w-5\"\n                >\n                  <path\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    d=\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\"\n                  ></path>\n                </svg>\n              </span>\n            </button>\n          </div>\n          <div class=\"py-4 flex gap-12  pl-4 font-light text-[.85rem]\">\n            <ul class=\"flex gap-1 flex-col \">\n              {leftData\n                .filter(({ value }) => value)\n                .map(({ label, value }) => {\n                  return (\n                    <li class=\"\">\n                      {label}: <span class={'font-normal'}>{value}</span>\n                    </li>\n                  );\n                })}\n            </ul>\n            <ul class=\"flex gap-1 flex-col\">\n              {rightData\n                .filter(({ value }) => value)\n                .map(({ label, value }) => {\n                  return (\n                    <li class=\"\">\n                      {label}: <span class={'font-normal'}>{value}</span>\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </div>\n      );\n    };\n    const productList = (\n      <div class=\"\">\n        <div class=\"flex justify-between  place-items-end\">\n          <p>{i18next.t('confirmation.selectedProducts')}</p>\n          {!widgetState.preselectedProduct && (\n            <button\n              class=\"inline-flex items-center justify-center rounded-md  font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-white text-black shadow hover:bg-white/90 h-9 px-4 py-2 font-ns gap-2 border-gray-300 border-[1px]\"\n              onClick={() => this.navigateTab(1)}\n            >\n              <span>\n                <svg\n                  stroke=\"currentColor\"\n                  fill=\"none\"\n                  stroke-width=\"1.5\"\n                  viewBox=\"0 0 24 24\"\n                  aria-hidden=\"true\"\n                  height=\"1em\"\n                  width=\"1em\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  class=\"h-5 w-5\"\n                >\n                  <path\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    d=\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\"\n                  ></path>\n                </svg>\n              </span>\n            </button>\n          )}\n        </div>\n        <div class=\"py-4 flex gap-12  pl-4 font-light text-[.85rem]\">\n          <div class=\"grid gap-5 grid-cols-2 md:grid-cols-2 lg:grid-cols-4\">\n            {widgetState.products\n              .filter(item => widgetState.selectedProducts.includes(item.id))\n              .map(product => {\n                return (\n                  <charma-card key={product.id} id={product.id} selected={widgetState.selectedProducts.includes(product.id)} product={product} isDisplayOnly={true}></charma-card>\n                );\n              })}\n          </div>\n        </div>\n      </div>\n    );\n    return (\n      <Host>\n        <section class=\"rounded-md px-6 pb-6 mb-4 bg-white flex flex-col font-ns\">\n          {productList}\n          {!widgetState.isDeliveryValid &&\n            confirmationSection({\n              title: i18next.t('confirmation.shippingInformation'),\n              handleClick: () => {\n                if (!widgetState.isDeliveryValid) this.navigateTab(2);\n              },\n              leftData: [\n                deliveryState.type === 'company' && { label: i18next.t('shippingInfromation.form.organizationName'), value: deliveryState.organizationName },\n                deliveryState.type === 'personal' && { label: i18next.t('shippingInfromation.form.given_name'), value: deliveryState.givenName },\n                deliveryState.type === 'personal' && { label: i18next.t('shippingInfromation.form.family_name'), value: deliveryState.familyName },\n                { label: i18next.t('shippingInfromation.form.email'), value: deliveryState.email },\n                { label: i18next.t('shippingInfromation.form.street_address'), value: deliveryState.streetAddress },\n                { label: i18next.t('shippingInfromation.form.street_address2'), value: deliveryState.streetAddress2 },\n                { label: i18next.t('shippingInfromation.form.postal_code'), value: deliveryState.postalCode },\n                { label: i18next.t('shippingInfromation.form.city'), value: deliveryState.city },\n              ],\n              rightData: [\n                { label: i18next.t('shippingInfromation.form.care_of'), value: deliveryState.careOf },\n                { label: i18next.t('shippingInfromation.form.phone'), value: deliveryState.phone },\n                { label: i18next.t('shippingInfromation.form.country'), value: deliveryState.country },\n              ],\n            })}\n          {!widgetState.isBillingValid &&\n            confirmationSection({\n              title: i18next.t('confirmation.billingInformation'),\n              handleClick: () => {\n                if (!widgetState.isBillingValid) this.navigateTab(3);\n              },\n              leftData: [\n                { label: i18next.t('billingInformation.form.organization_number'), value: billingState.organizationRegistrationId },\n                { label: i18next.t('billingInformation.form.company_name'), value: billingState.organizationName },\n                { label: i18next.t('billingInformation.form.email'), value: billingState.email },\n              ],\n              rightData: [\n                { label: i18next.t('billingInformation.form.invoice_delivery'), value: billingState.invoiceType },\n                { label: i18next.t('billingInformation.form.zip'), value: billingState.postalCode },\n                { label: i18next.t('billingInformation.form.city'), value: billingState.city },\n                // { label: i18next.t('billingInformation.form.care_of'), value: billingState.country },\n              ],\n            })}\n        </section>\n      </Host>\n    );\n  }\n}\n"],"version":3}